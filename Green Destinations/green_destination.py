# -*- coding: utf-8 -*-
"""Green Destination.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11o56FOSkJUPSVyoFth510otCHSSCi6hI
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

pd.set_option("display.max_columns", None)
pd.set_option("display.max_rows", None)

data = pd.read_csv('/content/greendestination (1) (1).csv')

data.head()

data.info()

data.isna().sum()

data.shape

data.describe()

plt.figure(figsize=(20,8))
sns.barplot(x='JobRole',y='EmployeeNumber', data=data, hue='JobRole' )
plt.xticks(rotation=30)
plt.title('Employee working in Jobroles')
plt.xlabel(None)
plt.ylabel('No of Employee')

plt.figure(figsize=(20,8))
sns.barplot(x=data['EducationField'],y=data['EmployeeNumber'], hue=data['Attrition'])
# plt.xticks(rotation=45)
plt.title('Employee working in Education Field')
plt.xlabel(None)
plt.ylabel('No of Employee')

numeric_df = data.select_dtypes(include=[int,float])
numeric_df.drop(columns={'StandardHours','EmployeeCount'}, inplace=True)
numeric_df

categorical_df = data.select_dtypes(include=[object])
categorical_df

plt.figure(figsize=(20,8))
sns.scatterplot(x='TotalWorkingYears', y='Age', data=data, hue='Attrition')

corr_matrix = numeric_df.corr()
corr_matrix

plt.figure(figsize=(20,8))
sns.heatmap(round(corr_matrix,2),annot=True, linewidths=1)

def correlation(dataset, threshold):
    corr_matrix = dataset.corr()
    last_col = corr_matrix.columns[-1]
    corr_col = set()
    for col in corr_matrix.columns[:-1]:
        if abs(corr_matrix[col][last_col]) > threshold:
            corr_col.add(col)

    return list(corr_col)

corr_features = correlation(numeric_df, 0.20)
len(corr_features)

corr_features                     # Highly correlated entities

from matplotlib import pyplot as plt

plt.figure(figsize=(20,8))
plt.scatter(data['TotalWorkingYears'],data['MonthlyIncome'])
plt.title('Relationship Between Working Years and Monthly Income')
plt.xlabel('Working Years')
plt.ylabel('Income')
plt.show()

plt.figure(figsize=(20,8))
sns.scatterplot(x='TotalWorkingYears',y='MonthlyIncome', hue='Attrition', data=data)
plt.title('Relationship Between Working Years and Monthly Income')
plt.xlabel('Working Years')
plt.ylabel('Income')
plt.show()

ncol = numeric_df.columns
ncol

# ''' Outlier Detection '''
# # IQR
# # Calculate the upper and lower limits
# for i in ncol:
#   numeric_df.reset_index(drop=True,inplace=True)
#   Q1 = numeric_df[i].quantile(0.25)
#   Q3 = numeric_df[i].quantile(0.75)
#   IQR = Q3 - Q1
#   lower = Q1 - 1.5*IQR
#   upper = Q3 + 1.5*IQR

#   # Create arrays of Boolean values indicating the outlier rows
#   upper_array = np.where(numeric_df[i] >= upper)[0]
#   lower_array = np.where(numeric_df[i] <= lower)[0]

#   # Removing the outliers
#   numeric_df.drop(upper_array, inplace=True)
#   numeric_df.reset_index(drop=True,inplace=True)
#   numeric_df.drop(lower_array, inplace=True)

#   # Print the new shape of the DataFrame
#   print("New Shape: ", numeric_df.shape)

data.shape

data[data.duplicated()]

sns.boxplot(x=data['MonthlyIncome'], data=data)

i='MonthlyIncome'
Q1 = data[i].quantile(0.25)
Q3 = data[i].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - 1.5*IQR
upper = Q3 + 1.5*IQR

# Removing the outliers
data.drop(np.where(data[i] >= upper)[0], inplace=True)
data.drop(np.where(data[i] <= lower)[0], inplace=True)

#  # Print the new shape of the DataFrame
#  print("New Shape: ", data.shape)
print(data.shape)

data.reset_index(drop=True,inplace=True)

data.head()

sns.lineplot(x=data['PerformanceRating'],y=data['PercentSalaryHike'])

sns.barplot(x=data['Attrition'],y=data['JobSatisfaction'], hue=data['Attrition'])

sns.distplot(data['NumCompaniesWorked'],kde=False)
plt.title('Number of Companies worked in by Employees')
plt.xlabel('No. of Companies')
plt.ylabel('Employee Count')
plt.show()

df = data[data['BusinessTravel']=='Travel_Frequently']
df.shape

sns.scatterplot(x=df['EmployeeNumber'], y=df['MonthlyRate'], hue=df["Attrition"])
plt.xlabel('No of Employee')
plt.title("Distribution of Monthly Rate in Employee who Teavel Frequently")

sns.histplot(x=data['MonthlyIncome'], hue=data['Attrition'] )
plt.title('Monthly Income Dustribution of Employee')
plt.show()



